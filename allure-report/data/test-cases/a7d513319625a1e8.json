{
  "uid" : "a7d513319625a1e8",
  "name" : "test_add_contact_to_group",
  "fullName" : "test.contact.test_add_delete_contact_to_group#test_add_contact_to_group",
  "historyId" : "86c1c10f194592ad3a6c97305d356c56",
  "time" : {
    "start" : 1635087258374,
    "stop" : 1635087259347,
    "duration" : 973
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert (0 + 1) == 0\n +  where 0 = len([])\n +  and   0 = len([])",
  "statusTrace" : "app = <fixture.application.Application object at 0x000001F7E28FE130>\n\n    def test_add_contact_to_group(app):\n        if len(db.get_contact_list()) == 0:\n            app.contact.create(Contact(name=\"Ivan\", lastname=\"Ivanov\", phone_home=\"1199989\", phone_mobile=\"2211345\",\n                                       phone_work=\"443453\", phone_secondary=\"000123\", address=\"citystreethome\",\n                                       email=\"ivan@mail.com\", email2=\"ivan@mail.com\", email3=\"ivan@mail.com\"))\n        if len(db.get_group_list()) == 0:\n            app.group.create(Group(name=\"Test\"))\n        groups = db.get_group_list()\n        group = random.choice(groups)\n        contacts = db.get_contacts_not_in_group(Group(id=group.id))\n        if not contacts:\n            app.contact.create(Contact(name=\"Ivan\", lastname=\"Ivanov\", phone_home=\"1199989\", phone_mobile=\"2211345\",\n                                       phone_work=\"443453\", phone_secondary=\"000123\", address=\"citystreethome\",\n                                       email=\"ivan@mail.com\", email2=\"ivan@mail.com\", email3=\"ivan@mail.com\"))\n            contacts = db.get_contacts_not_in_group(Group(id=group.id))\n        contact = random.choice(contacts)\n        old_contacts_in_group = list(db.get_contacts_in_group(Group(id=group.id)))\n        app.contact.add_to_group_by_id(contact.id, group.name)\n        new_contacts_in_group = list(db.get_contacts_in_group(Group(id=group.id)))\n>       assert len(old_contacts_in_group) + 1 == len(new_contacts_in_group)\nE       assert (0 + 1) == 0\nE        +  where 0 = len([])\nE        +  and   0 = len([])\n\ntest\\contact\\test_add_delete_contact_to_group.py:29: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "app",
    "time" : {
      "start" : 1635087258260,
      "stop" : 1635087258373,
      "duration" : 113
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "stop",
    "time" : {
      "start" : 1635087230696,
      "stop" : 1635087230696,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "afterStages" : [ {
    "name" : "stop::fin",
    "time" : {
      "start" : 1635087292696,
      "stop" : 1635087293362,
      "duration" : 666
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test.contact"
  }, {
    "name" : "suite",
    "value" : "test_add_delete_contact_to_group"
  }, {
    "name" : "host",
    "value" : "DESKTOP-VASELE"
  }, {
    "name" : "thread",
    "value" : "8888-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.contact.test_add_delete_contact_to_group"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a7d513319625a1e8.json",
  "parameterValues" : [ ]
}